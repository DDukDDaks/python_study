import requests
import json
import pandas as pd
import time
# import csv
# f=open('매물정보_추출_테스트_ver1.csv','a',newline='')
# wr = csv.writer(f)

# jeonju = ['108765','17086','5275','124848','124411','121732','24998','125196','108587','5278','5281','130965','124353','5283','126025','5284','145199','5280','129199','136126','102968','111285','143877','120579','127580','134162','108815','101163','5287','118234','128100','116718','5289','116760','139133','112828','15014','101338','5290','109541','101354','103591','102517','115408','112814','122588','115894','113510','115353','15019','108982','126137','117389','5301','5297','107847','101164','107112','111855','19308','5464','123544','118486','5469','106691','116541','5476','15021','106616','5479','5484','15023','109024','124457','25378','25377','15025','27176','27177','15031','112427','19032','5519','25368','121502','15026','15027','101017','5505','26323','118894','5508','109637','124504','5512','133092','5467','5474','5471','107763','123090','5488','15035','111168','15032','101784','5515','5491','118257','5495','5496','5500','113240','115356','115525','113206','113343','113239','113205','115524','113280','103671','103672','115438','125652','113342','106505','5510','5523','5525','116408','19110','26726','109585','106220','139297','120556','140064','15017','103259','101165','117422','106498','117937','146979','100216','5805','5791','122036','113478','121373','112806','5809','15036','5530','114729','140441','5810','125767','24953','144258','25462','14273','122941','122137','103742','5552','116946','116989','5560','5566','25564','25562','25561','5563','5570','5572','5575','102407','19540','102337','25566','17748','101942','19287','101166','25567','103069','5579','5585','108795','116043','100874','142403','121443','115057','115059','15040','105689','108410','15041','124402','118621','116761','105293','115599','110465','104983','107985','108422','108419','108420','104250','109193','105571','15042','5640','5644','5653','108433','133644','117386','105143','109120','17087','101585','5789','15047','15044','5790','101168','5782','5785','5787','17290','17291','5776','101167','5788','25705','122729','116042','124474','122586','142249','105213','5292','147551','101169','104857','5294','15049','17089','15050','5323','15051','15054','15053','124792','15055','5329','100458','15061','100464','17092','5307','5332','5337','103776','17740','5342','5310','15057','5354','5316','5357','5364','15059','107456','5304','100160','137326','125156','109121','100895','105209','17096','141580','105144','109161','15066','105207','105240','120340','105600','109122','105211','17097','5388','5384','118347','5396','5393','15067','15068','137710','5409','5412','5455','22424','5390','22683','5395','111977','111890','5457','102080','5419','15070','121052','15071','19717','5415','101170','5423','101171','121041','24709','114411','5429','15073','5453','5460','101172','125391','109125','105193','131772','15075','19718','110199','110064','146433','17100','15076','5611','5613','104031','116041','104612','106216','5619','5636','15078','5595','15080','15083','17363','102535','15077','5615','5617','116879','5624','5622','101018','101521','15088','17103','107289','17359','5632','17360','107467','116872','5660','26326','111875','24910','25308','5671','5678','5664','107930','101019','5687','5694','109232','5701','17336','5666','100159','26612','5662','112071','25370','121772','111194','17105','101174','103440','5703','100903','120545','123356','113411','11765','105192','110121','101173','5683','5697','27008','101175','105190','116876','5706','5711','5714','15093','15092','19212','5733','15095','15097','15099','116040','117446','122231','5719','5742','5720','5743','105191','113643','5751','116398','15105','5753','108441','100908','5756','5759','128786','17113','15108','104944','5737','143281','5739','17109','26327','105360','15104','19719','5772','104988','27664','107035','101416','120953','137670','108457','109059','119323','116670','118657','14410','24640','123154','26363','14773','106219','23838','27665','5732','5734','5746','17107','5748','117124','23720','115346','115386','108029','25217','26968','106715','107335','23721','115598']
GwangJu = [104057,100857,16444,4367,8044,104059,104292,16470,4368,8046,110819,115867,8043,127621,123082,111876,8045,100859,16474,16475,118881,143040,147332,16476,117918,101975,104320,112674,101140,107287,104328,101223,101224,101225,104294,27436,27437,4380,104905,111022,111023,126171,103497,16479,112767,106181,106182,108394,105023,140877,108494,140666,8049,8050,16481,121165,16487,16488,126403,110508,103175,102514,9941,16486,102412,110362,16491,16492,16494,16500,8052,8053,101759,101986,25352,143670,139954,108889,115405,111263,123560,8051,115433,108890,107860,16503,4369,114848,16505,16508,101142,16506,4370,115490,124658,104817,101141,123745,115032,112577,112777,122805,103673,27438,109875,102414,119559,116429,27893,100460,103498,104893,121582,101250,103310,101762,100865,104013,108681,103923,105716,100211,100214,100210,100869,104656,104657,27894,16533,13105,108387,111394,101253,101143,27624,25186,25185,101144,19096,101993,108892,108900,111667,119343,119034,120664,16538,100212,112490,109993,109994,104807,106335,147200,124555,108894,147317,117783,117924,112363,122874,117657,118969,113165,123742,130925,131628,111819,117962,120527,114962,123655,114300,147325,25102,100875,117117,4404,15531,126543,116726,117118,15535,125121,4405,115739,4406,117194,119020,111983,4407,4410,111422,117540,100567,100568,15556,4371,146357,4373,4375,4376,4378,100569,120066,15565,10465,4384,121260,4386,112190,121300,10611,10610,4394,123003,4392,4399,117813,137364,117196,118424,112252,8070,10279,4383,13705,4385,10601,4388,4389,4390,10602,8071,4391,104805,10790,8069,10609,8072,15606,4393,4397,4398,16551,10260,4395,16552,16554,107179,100571,100570,4401,16558,4400,4402,4403,108903,103669,103662,102093,101770,103899,105696,100878,110661,107890,111818,101772,100880,101794,100883,103547,106813,101793,137549,110670,113010,102712,100886,100889,125163,111449,100894,102195,101920,102413,100044,4430,120117,4432,4420,15613,4423,16562,4425,104095,110457,112769,4428,15615,146319,144637,4539,102527,15621,15619,4544,4546,104981,4556,4551,4541,4525,4534,122933,120039,4550,109402,124512,16567,4572,4673,126431,147098,4679,4582,4587,4591,4597,4599,117175,4689,17255,4608,4614,27336,4642,4632,15642,4628,134653,15662,104503,109504,100735,118389,104545,4638,108296,103524,109380,107741,129863,105813,143866,4664,4670,4512,11400,103522,10251,19236,19238,126918,109401,11277,4411,4563,4567,104837,104838,135351,15656,105208,134651,125021,15659,17257,4412,4413,147677,4415,118578,123870,137888,16569,104982,113153,118005,4416,15661,115532,115510,136712,116720,118903,10748,116081,100901,119905,108156,105226,4715,4697,4721,4501,4699,111860,117925,15665,140972,109722,4716,25315,4701,125372,113698,103661,109261,125857,116087,124609,101146,108506,103523,105739,4717,4718,19240,15668,101145,9916,24679,122252,104806,101147,4485,19755,4490,4434,4441,19527,104902,15672,4446,4453,106346,126819,4511,4513,124245,16585,16587,10491,16588,4460,101148,101032,15678,114909,4506,10186,17325,4519,118392,4464,4466,4469,4481,4523,110550,17324,4479,16594,19756,106555,109505,106159,106160,143448,105339,105338,146801,123073,4726,120277,125403,119517,4728,118288,19712,114739,123580,123680,145685,106577,140978,119960,128681,4732,4746,15682,5075,4756,111150,134343,116698,114500,4760,127052,144624,15684,4906,15686,17462,113007,125307,147687,26065,104835,106402,115176,147417,147188,119207,119204,127305,115704,112106,4773,121381,146985,114522,4775,130622,15689,126647,4813,4826,4853,4856,4859,4863,4871,108905,108386,100906,146039,4787,127543,4806,4782,115024,111872,143498,118446,124289,108577,145328,15692,128927,108734,4875,4878,4882,4889,4893,108297,103550,125865,19523,4902,109942,120510,16600,101034,4908,4941,4944,115375,117587,109576,112642,117644,112557,16605,4963,4975,25544,4951,4959,4961,8090,120303,15699,120692,125073,15703,146677,15697,5084,5079,5072,5091,5077,15701,110338,5068,126136,136823,5096,147499,112180,114767,5086,128904,127072,15702,146862,5071,18284,108913,5089,123659,120909,5256,5255,109820,19757,15705,5250,19524,15706,5252,15731,15707,11936,5253,5257,5254,5308,104631,5311,9880,15766,5315,5326,5306,5358,5317,5320,5324,5328,15743,16616,110431,5330,5333,5360,5340,5341,5347,5349,5350,5351,5362,113050,112768,19189,117345,117532,107774,122960,122959,5199,10059,5215,5218,16617,5213,113134,108827,100917,123566,4988,134161,4991,147524,15777,112256,141459,123565,100920,4993,123567,128770,27225,134469,140906,105373,104334,15779,104895,105291,103168,106987,104543,104335,19228,19229,5223,5228,122654,128150,101786,104836,140523,5221,101036,125028,5236,113283,25850,100922,5240,5241,15783,102460,16624,112639,15788,15785,15791,19525,25026,106687,147583,127478,110695,104804,9886,119614,117930,123507,10933,10056,10523,111825,10522,118377,5006,5009,108917,111873,125974,120020,120022,139388,10057,4997,106290,122325,5010,120025,15795,15793,5003,125957,125632,106344,123657,123652,101774,108816,16628,112816,115311,109940,115308,120269,108918,5295,144323,121721,121768,139130,134432,16630,5296,15803,16004,5259,17618,126125,5258,19355,106292,100930,101037,19526,16629,110159,17613,103709,16005,5265,5267,125726,22532,5282,5293,5261,5263,5268,5271,24995,127397,16011,132772,5277,5279,122214,122131,115369,5015,5017,122129,5020,5099,5174,25187,128781,5108,5183,5186,25580,105587,105586,106294,5109,108301,144517,16018,5188,112654,116263,5105,17464,110079,106293,25167,103638,110839,134852,134850,16020,112770,104808,113012,16024,19758,16023,125040,16014,16015,5150,128995,125152,125813,5049,16026,16027,5064,5053,5055,5056,5058,5051,5060,110991,110992,112305,5063,16032,16029,5061,5062,16030,16031,119476,111900,113282,108553,125192,16033,19239,24775,127345,124708,5303,127006,108820,147037,5305,108406,128024,5300,113133,132462,109369,112179,27767,134406,118847,118851,146993,147341,113084,19546,19548,16041,16042,146577,5408,108920,5414,5405,5420,5422,5440,5426,5434,5435,108921,18848,16631,11313,5441,5442,24853,11970,5443,16044,109068,5444,100934,19545,5439,19759,5436,16035,5437,19547,16632,100940,141505,127931,16636,106921,5518,16637,138344,127685,117357,106339,16659,5520,16657,136708,5521,5522,147021,123100,101787,101728,25219,24682,103546,122934,25533,16662,100942,134366,133102,106898,106038,5561,5549,133242,16685,127933,16665,5554,5555,5550,108922,130402,114662,110492,103311,121865,106296,104818,26567,5556,102554,16686,147717,5553,16689,118135,5557,104176,120827,12813,5558,19760,116213,106527,5562,101038,123658,143020,5448,104834,5449,5445,5446,114836,5447,122215,119362,11309,16690,100944,116274,102765,5532,5529,8100,5542,5544,5545,108340,112366,108838,114908,111986,16691,5533,119335,5535,5537,5539,5541,5547,16693,24642,103652,5373,5369,5389,5379,16704,100946,19549,16705,5387,5377,16700,17577,5381,16702,5394,108929,10598,5401,5386,5450,5494,5451,5497,5499,16727,17465,138274,5454,125197,5456,5458,5459,5462,5465,5468,100054,5470,5475,106919,5516,132105,5502,105477,5489,5483,5506,5485,105777,105775,105776,104685,100377,5487,5503,5509,111169,112448,5511,5481,16723,104211,108495,24660,130416,116850,108334,16724]
#광주광역시
apt_data_df = pd.DataFrame(columns=['시','군구','동','아파트이름','층수',
    '몇동','몇호','방향','거래타입','가격','면적','평수','평단가','매전갭',
    '최근실거래가','최근거래날짜','실거래가 대비 호가 퍼센트','특징',
    '설명','연식','세대수','공시가격','평균관리비','중개수수료',
    '취득세','보유세','공인중개사','중개사이름','중개사번호','링크'])
headers = {
    'Accept': '*/*',
    'Accept-Language': 'ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7',
    'Connection': 'keep-alive',
    'Referer': 'https://new.land.naver.com/complexes/4401?ms=35.1599,126.8018956,16&a=APT:ABYG:JGC&e=RETAIL',
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.57 Whale/3.14.133.23 Safari/537.36',
    'authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IlJFQUxFU1RBVEUiLCJpYXQiOjE2NTA2NTQzNDYsImV4cCI6MTY1MDY2NTE0Nn0.CPWwXaq7urgnW1tUyyEqOj5m-Kg75zQFosok1Q4iJ4E',
    
}

def apt_detail_object(json_data,complexNo):
    # 매물리스트에 있는 매물 정보 긁어오는 함수 /
    for item in json_data['articleList']:
        try :
            code = item['articleNo'] #매물코드
        except:
            code = ''
        #매물링크    
        apt_link = 'https://m.land.naver.com/article/info/'+code   

        try :
            apt_name = item['articleName'] #아파트이름
        except:
            apt_name = ''
        
        try :
            trade_type = item['tradeTypeName'] #매매,전세,월세
        except:
            trade_type = ''
        
        try :
            floor = item['floorInfo'] #층수
        except:
            floor = ''
        print(floor)

        try :
            feature = item['articleFeatureDesc'] #매물 설명
        except:
            feature = ''
        try :
            tagList = item['tagList'] #매물 태그
        except:
            tagList = ''
        
        try :
            price = item['dealOrWarrantPrc'] #가격
            if trade_type =='월세':
                price = f"{item['dealOrWarrantPrc']}/{item['rentPrc']}"
        except:
            price = ''
            # 공시가격
        
        try :
            realtor = item['realtorName'] #공인중개사
        except:
            realtor = ''
        
        try :
            public_area = item['area1'] #공급평수
        except:
            public_area = ''
        
        try :
            private_area = item['area2'] #전용평수
        except:
            private_area = ''


    # 매물 개별로 하나하나 들어와서 다양한 상세정보 긁음.
        res = requests.get(f'https://new.land.naver.com/api/articles/{code}', headers=headers)
        # response = requests.get('https://new.land.naver.com/api/articles/2212513920', headers=headers, params=params, cookies=cookies)
        try :
            temp = json.loads(res.text)
        except:
            continue
        try : #A1,B1,B2 거래타입 파라미터로 사용
            type_code = temp['articleAddition']['tradeTypeCode'] 
        except :
            type_code = ''

        if trade_type == '매매':
            try : #물건 호가 ex)15000
                deal_price = temp['articlePrice']['dealPrice'] 
            except :
                deal_price = ''
        else : #전세, 월세
            try : #보증금 ex)15000
                deal_price = temp['articlePrice']['warrantPrice'] 
            except :
                deal_price = ''   

        try: #중개사 이름 #중개사 번호
            realtor_name = temp['articleRealtor']['representativeName'] 
            realtor_phone = temp['articleRealtor']['cellPhoneNo'] 
        except :    
            realtor_name=''
            realtor_phone=''
            
        try : #평수 순번, 실거래가, 매전갭 추출 시 필요
            pyeong_no=temp['landPrice']['ptpNo'] 
        except :
            pyeong_no = ''
        try : #방향 / 남동
            direction = temp['articleFacility']['directionTypeName'] 
        except:
            direction = ''    
        
        try : #평단가 1200
            pyeong_price = f"{int(temp['articlePrice']['priceBySpace'])}만원"
        except :
            pyeong_price = ''        
    
        
        try :# 몇동
            apt_dong_number = temp['landPrice']['dongNm'] 
        except :
            apt_dong_number = ''        
            
        try :  # 몇호
            apt_home_number = temp['landPrice']['hoNm']
        except :
            apt_home_number = ''    
            
        try : #1억으로 나누기 # 호실공시가격
            posted_price = f"{round(int(temp['landPrice']['price'])/100000000,1)}억원" 
        except :  
            posted_price = '안나옴'     
            
        try : # 평균관리비 만원단위 나누기
            management_cost = f"{int(temp['articleDetail']['monthlyManagementCost']/10000)}만원"
        except :
            management_cost = ''       

        # 중개수수료 취득세 보유세
        try :  # 중개수수료 만원으로 나누기
            broker_fee = f"{int(temp['articleTax']['brokerFee']/10000)}만원"
        except :
            broker_fee = '' 

        try :  # 취득세 1억넘을 때는 억으로 나누기 / 나머진 만원으로 나누기
            if len(str(temp['articleTax']['totalPrice']))>=9 :
                get_tax = f"{round(temp['articleTax']['totalPrice']/ 100000000,2)}억원"
            else : 
                get_tax = f"{int(temp['articleTax']['totalPrice']/ 10000)}만원"
        except :
            get_tax = ''


        try : # 보유세 만원단위 나누기
            have_tax = f"{int((int(temp['landPrice']['landPriceTax']['propertyTotalTax'])+int(temp['landPrice']['landPriceTax']['realEstateTotalTax']))/10000)}만원" 
        except :
            have_tax = ''  
            
        
        try :   #연식
            building_year = f"{temp['articleDetail']['aptUseApproveYmd'][:4]}년"
        except :
            building_year = ''

        try : #세대수
            household_Count = f"{temp['articleDetail']['aptHouseholdCount']}세대"
        except :
            household_Count = ''

        try : #주소
            city = temp['articleDetail']['exposureAddress'].split()[0]
            gungu = temp['articleDetail']['exposureAddress'].split()[1]
            dong = temp['articleDetail']['exposureAddress'].split()[2]
        except : 
            city = ''
            gungu = ''
            dong = ''

        # 매전 갭 구하기
        res = requests.get(f'https://new.land.naver.com/api/complexes/{complexNo}/prices?complexNo={complexNo}&tradeType={type_code}&areaNo={pyeong_no}&type=table', headers=headers)
        try :
            temp = json.loads(res.text)
        except:
            continue
        try: 
            gap_rate = temp['marketPrices'][0]['leasePerDealRate'] #매전갭 퍼센트
#             print(gap_rate, type(gap_rate))
#             if type(gap_rate)==list:
#                 gap_rate=gap_rate[0]
        except :
            gap_rate = ''
        # 가장 최근 실거래가 구하기 및 현재 호가와 비교
        
        res = requests.get(f'https://new.land.naver.com/api/complexes/{complexNo}/prices/real?complexNo={complexNo}&tradeType={type_code}&areaNo={pyeong_no}&type=table', headers=headers)
        try :
            temp = json.loads(res.text)
        except:
            continue
        # print(temp)
        if trade_type == '매매':
            try : #매매
                recent_deal_Price = temp['realPriceOnMonthList'][0]['realPriceList'][0]['dealPrice'] #계산을 위한 최근실거래가
                recent_Trade_date = temp['realPriceOnMonthList'][0]['realPriceList'][0]['formattedTradeYearMonth'] #최근실거래 날짜
                recent_price = temp['realPriceOnMonthList'][0]['realPriceList'][0]['formattedPrice']
            except :    
                recent_deal_Price= ''
                recent_Trade_date= ''
                recent_price = ''
        else : 
            try : #전세월세
                recent_deal_Price = temp['realPriceOnMonthList'][0]['realPriceList'][0]['leasePrice'] #최근실거래가
                recent_Trade_date = temp['realPriceOnMonthList'][0]['realPriceList'][0]['formattedTradeYearMonth'] #최근실거래 날짜
                recent_price = temp['realPriceOnMonthList'][0]['realPriceList'][0]['formattedPrice']
            except :    
                recent_deal_Price= ''
                recent_Trade_date= ''
                recent_price = ''
        # #현재호가와 비교
        try :
            compare_price = f'{int(deal_price/recent_deal_Price*100)}%'
        except :
            compare_price = ''

        # 최근거래가 formatted ex) 1억5000/50
        try:
            recent_price = temp['realPriceOnMonthList'][0]['realPriceList'][0]['formattedPrice']
        except:
            recent_price = ''



#         # 매물코드, 아파트이름, 매매,전세,월세, 층수, 매물 설명, 매물 태그, 가격, 공급평수, 전용평수, 
#         # 공인중개사, 중개사 이름, 중개사 번호, 매전갭, 최근실거래가, 최근거래날짜, 실거래가 대비 호가 퍼센트
#         len(df)
        i = len(apt_data_df)
        print(i)
        if i % 200 == 0:
            time.sleep(3)
        # apt_data_df.loc[i,"매물코드"]=code
        apt_data_df.loc[i,"시"]=city
        apt_data_df.loc[i,"군구"]=gungu
        apt_data_df.loc[i,"동"]=dong
        apt_data_df.loc[i,"아파트이름"]=apt_name
        apt_data_df.loc[i,"층수"]=f"{item['floorInfo']}층"
        apt_data_df.loc[i,"몇동"]=apt_dong_number+'동'
        apt_data_df.loc[i,"몇호"]=apt_home_number+'호'
        apt_data_df.loc[i,"방향"]=direction
        apt_data_df.loc[i,"거래타입"]=trade_type
        apt_data_df.loc[i,"가격"]=price
        apt_data_df.loc[i,"면적"]=f'{public_area}/{private_area}m²'
        apt_data_df.loc[i,"평수"]=f'{round(public_area*0.3025,1)}/{round(private_area*0.3025,1)}평'
        apt_data_df.loc[i,"평단가"]=pyeong_price
        apt_data_df.loc[i,"매전갭"]=gap_rate
        apt_data_df.loc[i,"최근실거래가"]=recent_price
        apt_data_df.loc[i,"최근거래날짜"]=recent_Trade_date
        apt_data_df.loc[i,"실거래가 대비 호가 퍼센트"]=compare_price
        apt_data_df.loc[i,"특징"]=feature
        apt_data_df.loc[i,"설명"]=tagList
        apt_data_df.loc[i,"연식"]=building_year
        apt_data_df.loc[i,"세대수"]=household_Count
        apt_data_df.loc[i,"평균관리비"]=management_cost
        apt_data_df.loc[i,"공시가격"]=posted_price 
        apt_data_df.loc[i,"중개수수료"]=broker_fee
        apt_data_df.loc[i,"취득세"]=get_tax
        apt_data_df.loc[i,"보유세"]=have_tax
        apt_data_df.loc[i,"공인중개사"]=realtor
        apt_data_df.loc[i,"중개사이름"]=realtor_name
        apt_data_df.loc[i,"중개사번호"]=realtor_phone
        apt_data_df.loc[i,"링크"]=apt_link
#         print(temp_data)
    if json_data['isMoreData']==False:
        return apt_data_df
    
def apt_detail_list(complexNo):
    # PC 네이버부동산 매물검색
    page = 1
    # 매물 페이지 로딩을 불러올 때 사용
    while True:
        data = f'?tradeType=&sameAddressGroup=true&page={page}&complexNo={complexNo}'
        response = requests.get(f'https://new.land.naver.com/api/articles/complex/{complexNo}'+data,headers=headers)
        # print(response.text)
        try :
            json_data = json.loads(response.text)
        except:
            continue   
        if json_data['isMoreData']==True:
            apt_detail_object(json_data,complexNo)
            print(1)
            page+=1
        else:
            apt_detail_df = apt_detail_object(json_data,complexNo)
            print(2)
            break
#     print(apt_detail_df)
    apt_detail_df.to_csv("test_ver.csv",encoding="utf-8-sig",index=False)
    
    hurry_df = apt_detail_df[apt_detail_df['특징'].str.contains('급매')] ## df[조건식]
    hurry_df.to_csv("apt_detail_df_text_Gwangju_hurry.csv",encoding="utf-8-sig",index=False)
    

# apt_detail_list(114522)    
# ab = ['8928','103385']
# ab = ['8928']
for x,y in enumerate(GwangJu) :
    apt_detail_list(y)
    if x % 30 == 0:
        time.sleep(3) #1000번 조회마다 3초 쉼
